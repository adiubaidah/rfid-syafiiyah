// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package persistence

import (
	"context"
)

// iteratorForCreateArduinoModes implements pgx.CopyFromSource.
type iteratorForCreateArduinoModes struct {
	rows                 []CreateArduinoModesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateArduinoModes) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateArduinoModes) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Mode,
		r.rows[0].InputTopic,
		r.rows[0].AcknowledgementTopic,
		r.rows[0].ArduinoID,
	}, nil
}

func (r iteratorForCreateArduinoModes) Err() error {
	return nil
}

func (q *Queries) CreateArduinoModes(ctx context.Context, arg []CreateArduinoModesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"arduino_mode"}, []string{"mode", "input_topic", "acknowledgment_topic", "arduino_id"}, &iteratorForCreateArduinoModes{rows: arg})
}

// iteratorForCreateHolidayDates implements pgx.CopyFromSource.
type iteratorForCreateHolidayDates struct {
	rows                 []CreateHolidayDatesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateHolidayDates) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateHolidayDates) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Date,
		r.rows[0].HolidayID,
	}, nil
}

func (r iteratorForCreateHolidayDates) Err() error {
	return nil
}

func (q *Queries) CreateHolidayDates(ctx context.Context, arg []CreateHolidayDatesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"holiday_date"}, []string{"date", "holiday_id"}, &iteratorForCreateHolidayDates{rows: arg})
}
