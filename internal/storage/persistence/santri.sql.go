// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: santri.sql

package persistence

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSantri = `-- name: CreateSantri :one
INSERT INTO
    "santri" (
        "nis",
        "name",
        "gender",
        "is_active",
        "generation",
        "photo",
        "occupation_id",
        "parent_id"
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6 :: text,
        $7,
        $8
    ) RETURNING id, nis, name, gender, generation, is_active, photo, occupation_id, parent_id
`

type CreateSantriParams struct {
	Nis          pgtype.Text `db:"nis" json:"nis"`
	Name         string      `db:"name" json:"name"`
	Gender       Gender      `db:"gender" json:"gender"`
	IsActive     pgtype.Bool `db:"is_active" json:"is_active"`
	Generation   int32       `db:"generation" json:"generation"`
	Photo        pgtype.Text `db:"photo" json:"photo"`
	OccupationID pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID     pgtype.Int4 `db:"parent_id" json:"parent_id"`
}

func (q *Queries) CreateSantri(ctx context.Context, arg CreateSantriParams) (Santri, error) {
	row := q.db.QueryRow(ctx, createSantri,
		arg.Nis,
		arg.Name,
		arg.Gender,
		arg.IsActive,
		arg.Generation,
		arg.Photo,
		arg.OccupationID,
		arg.ParentID,
	)
	var i Santri
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
	)
	return i, err
}

const deleteSantri = `-- name: DeleteSantri :one
DELETE FROM
    "santri"
WHERE
    "id" = $1 RETURNING id, nis, name, gender, generation, is_active, photo, occupation_id, parent_id
`

func (q *Queries) DeleteSantri(ctx context.Context, id int32) (Santri, error) {
	row := q.db.QueryRow(ctx, deleteSantri, id)
	var i Santri
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
	)
	return i, err
}

const getSantri = `-- name: GetSantri :one
SELECT
    santri.id, santri.nis, santri.name, santri.gender, santri.generation, santri.is_active, santri.photo, santri.occupation_id, santri.parent_id,
    "parent"."id" AS "parent_id",
    "parent"."name" AS "parent_name",
    "parent"."wa_phone" AS "parent_wa_phone",
    "parent"."address" AS "parentAddress",
    "parent"."photo" AS "parentPhoto"
FROM
    "santri"
    LEFT JOIN "parent" ON "santri"."parent_id" = "parent"."id"
    LEFT JOIN "santri_occupation" ON "santri"."occupation_id" = "santri_occupation"."id"
WHERE
    "santri"."id" = $1
`

type GetSantriRow struct {
	ID            int32       `db:"id" json:"id"`
	Nis           pgtype.Text `db:"nis" json:"nis"`
	Name          string      `db:"name" json:"name"`
	Gender        Gender      `db:"gender" json:"gender"`
	Generation    int32       `db:"generation" json:"generation"`
	IsActive      pgtype.Bool `db:"is_active" json:"is_active"`
	Photo         pgtype.Text `db:"photo" json:"photo"`
	OccupationID  pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID      pgtype.Int4 `db:"parent_id" json:"parent_id"`
	ParentID_2    pgtype.Int4 `db:"parent_id_2" json:"parent_id_2"`
	ParentName    pgtype.Text `db:"parent_name" json:"parent_name"`
	ParentWaPhone pgtype.Text `db:"parent_wa_phone" json:"parent_wa_phone"`
	ParentAddress pgtype.Text `db:"parentAddress" json:"parentAddress"`
	ParentPhoto   pgtype.Text `db:"parentPhoto" json:"parentPhoto"`
}

func (q *Queries) GetSantri(ctx context.Context, id int32) (GetSantriRow, error) {
	row := q.db.QueryRow(ctx, getSantri, id)
	var i GetSantriRow
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
		&i.ParentID_2,
		&i.ParentName,
		&i.ParentWaPhone,
		&i.ParentAddress,
		&i.ParentPhoto,
	)
	return i, err
}

const listSantriAscGeneration = `-- name: ListSantriAscGeneration :many
SELECT
    santri.id, santri.nis, santri.name, santri.gender, santri.generation, santri.is_active, santri.photo, santri.occupation_id, santri.parent_id,
    "parent"."id" AS "parent_id",
    "parent"."name" AS "parent_name",
    "parent"."wa_phone" AS "parent_wa_phone",
    "santri_occupation"."id" AS "occupation_id",
    "santri_occupation"."name" AS "occupation_name"
FROM
    "santri"
    LEFT JOIN "parent" ON "santri"."parent_id" = "parent"."id"
    LEFT JOIN "santri_occupation" ON "santri"."occupation_id" = "santri_occupation"."id"
WHERE
    (
        $1 :: text IS NULL
        OR "santri"."name" ILIKE '%' || $1 || '%'
        OR "santri"."nis" ILIKE '%' || $1 || '%'
    )
    AND (
        $2 :: integer IS NULL
        OR "parent_id" = $2 :: integer
    )
    AND (
        $3 :: integer IS NULL
        OR "occupation_id" = $3 :: integer
    )
    AND (
        $4 :: integer IS NULL
        OR "generation" = $4 :: integer
    )
ORDER BY
    "generation" ASC
LIMIT
    $6 OFFSET $5
`

type ListSantriAscGenerationParams struct {
	Q            pgtype.Text `db:"q" json:"q"`
	ParentID     pgtype.Int4 `db:"parent_id" json:"parent_id"`
	OccupationID pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	Generation   pgtype.Int4 `db:"generation" json:"generation"`
	OffsetNumber int32       `db:"offset_number" json:"offset_number"`
	LimitNumber  int32       `db:"limit_number" json:"limit_number"`
}

type ListSantriAscGenerationRow struct {
	ID             int32       `db:"id" json:"id"`
	Nis            pgtype.Text `db:"nis" json:"nis"`
	Name           string      `db:"name" json:"name"`
	Gender         Gender      `db:"gender" json:"gender"`
	Generation     int32       `db:"generation" json:"generation"`
	IsActive       pgtype.Bool `db:"is_active" json:"is_active"`
	Photo          pgtype.Text `db:"photo" json:"photo"`
	OccupationID   pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID       pgtype.Int4 `db:"parent_id" json:"parent_id"`
	ParentID_2     pgtype.Int4 `db:"parent_id_2" json:"parent_id_2"`
	ParentName     pgtype.Text `db:"parent_name" json:"parent_name"`
	ParentWaPhone  pgtype.Text `db:"parent_wa_phone" json:"parent_wa_phone"`
	OccupationID_2 pgtype.Int4 `db:"occupation_id_2" json:"occupation_id_2"`
	OccupationName pgtype.Text `db:"occupation_name" json:"occupation_name"`
}

func (q *Queries) ListSantriAscGeneration(ctx context.Context, arg ListSantriAscGenerationParams) ([]ListSantriAscGenerationRow, error) {
	rows, err := q.db.Query(ctx, listSantriAscGeneration,
		arg.Q,
		arg.ParentID,
		arg.OccupationID,
		arg.Generation,
		arg.OffsetNumber,
		arg.LimitNumber,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSantriAscGenerationRow{}
	for rows.Next() {
		var i ListSantriAscGenerationRow
		if err := rows.Scan(
			&i.ID,
			&i.Nis,
			&i.Name,
			&i.Gender,
			&i.Generation,
			&i.IsActive,
			&i.Photo,
			&i.OccupationID,
			&i.ParentID,
			&i.ParentID_2,
			&i.ParentName,
			&i.ParentWaPhone,
			&i.OccupationID_2,
			&i.OccupationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSantriAscName = `-- name: ListSantriAscName :many
SELECT
    santri.id, santri.nis, santri.name, santri.gender, santri.generation, santri.is_active, santri.photo, santri.occupation_id, santri.parent_id,
    "parent"."id" AS "parent_id",
    "parent"."name" AS "parent_name",
    "parent"."wa_phone" AS "parent_wa_phone",
    "santri_occupation"."id" AS "occupation_id",
    "santri_occupation"."name" AS "occupation_name"
FROM
    "santri"
    LEFT JOIN "parent" ON "santri"."parent_id" = "parent"."id"
    LEFT JOIN "santri_occupation" ON "santri"."occupation_id" = "santri_occupation"."id"
WHERE
    (
        $1 :: text IS NULL
        OR "santri"."name" ILIKE '%' || $1 || '%'
        OR "santri"."nis" ILIKE '%' || $1 || '%'
    )
    AND (
        $2 :: integer IS NULL
        OR "parent_id" = $2 :: integer
    )
    AND (
        $3 :: integer IS NULL
        OR "occupation_id" = $3 :: integer
    )
    AND (
        $4 :: integer IS NULL
        OR "generation" = $4 :: integer
    )
ORDER BY
    "santri"."name" ASC
LIMIT
    $6 OFFSET $5
`

type ListSantriAscNameParams struct {
	Q            pgtype.Text `db:"q" json:"q"`
	ParentID     pgtype.Int4 `db:"parent_id" json:"parent_id"`
	OccupationID pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	Generation   pgtype.Int4 `db:"generation" json:"generation"`
	OffsetNumber int32       `db:"offset_number" json:"offset_number"`
	LimitNumber  int32       `db:"limit_number" json:"limit_number"`
}

type ListSantriAscNameRow struct {
	ID             int32       `db:"id" json:"id"`
	Nis            pgtype.Text `db:"nis" json:"nis"`
	Name           string      `db:"name" json:"name"`
	Gender         Gender      `db:"gender" json:"gender"`
	Generation     int32       `db:"generation" json:"generation"`
	IsActive       pgtype.Bool `db:"is_active" json:"is_active"`
	Photo          pgtype.Text `db:"photo" json:"photo"`
	OccupationID   pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID       pgtype.Int4 `db:"parent_id" json:"parent_id"`
	ParentID_2     pgtype.Int4 `db:"parent_id_2" json:"parent_id_2"`
	ParentName     pgtype.Text `db:"parent_name" json:"parent_name"`
	ParentWaPhone  pgtype.Text `db:"parent_wa_phone" json:"parent_wa_phone"`
	OccupationID_2 pgtype.Int4 `db:"occupation_id_2" json:"occupation_id_2"`
	OccupationName pgtype.Text `db:"occupation_name" json:"occupation_name"`
}

func (q *Queries) ListSantriAscName(ctx context.Context, arg ListSantriAscNameParams) ([]ListSantriAscNameRow, error) {
	rows, err := q.db.Query(ctx, listSantriAscName,
		arg.Q,
		arg.ParentID,
		arg.OccupationID,
		arg.Generation,
		arg.OffsetNumber,
		arg.LimitNumber,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSantriAscNameRow{}
	for rows.Next() {
		var i ListSantriAscNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Nis,
			&i.Name,
			&i.Gender,
			&i.Generation,
			&i.IsActive,
			&i.Photo,
			&i.OccupationID,
			&i.ParentID,
			&i.ParentID_2,
			&i.ParentName,
			&i.ParentWaPhone,
			&i.OccupationID_2,
			&i.OccupationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSantriAscNis = `-- name: ListSantriAscNis :many
SELECT
    santri.id, santri.nis, santri.name, santri.gender, santri.generation, santri.is_active, santri.photo, santri.occupation_id, santri.parent_id,
    "parent"."id" AS "parent_id",
    "parent"."name" AS "parent_name",
    "parent"."wa_phone" AS "parent_wa_phone",
    "santri_occupation"."id" AS "occupation_id",
    "santri_occupation"."name" AS "occupation_name"
FROM
    "santri"
    LEFT JOIN "parent" ON "santri"."parent_id" = "parent"."id"
    LEFT JOIN "santri_occupation" ON "santri"."occupation_id" = "santri_occupation"."id"
WHERE
    (
        $1 :: text IS NULL
        OR "santri"."name" ILIKE '%' || $1 || '%'
        OR "santri"."nis" ILIKE '%' || $1 || '%'
    )
    AND (
        $2 :: integer IS NULL
        OR "parent_id" = $2 :: integer
    )
    AND (
        $3 :: integer IS NULL
        OR "occupation_id" = $3 :: integer
    )
    AND (
        $4 :: integer IS NULL
        OR "generation" = $4 :: integer
    )
ORDER BY
    "nis" ASC
LIMIT
    $6 OFFSET $5
`

type ListSantriAscNisParams struct {
	Q            pgtype.Text `db:"q" json:"q"`
	ParentID     pgtype.Int4 `db:"parent_id" json:"parent_id"`
	OccupationID pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	Generation   pgtype.Int4 `db:"generation" json:"generation"`
	OffsetNumber int32       `db:"offset_number" json:"offset_number"`
	LimitNumber  int32       `db:"limit_number" json:"limit_number"`
}

type ListSantriAscNisRow struct {
	ID             int32       `db:"id" json:"id"`
	Nis            pgtype.Text `db:"nis" json:"nis"`
	Name           string      `db:"name" json:"name"`
	Gender         Gender      `db:"gender" json:"gender"`
	Generation     int32       `db:"generation" json:"generation"`
	IsActive       pgtype.Bool `db:"is_active" json:"is_active"`
	Photo          pgtype.Text `db:"photo" json:"photo"`
	OccupationID   pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID       pgtype.Int4 `db:"parent_id" json:"parent_id"`
	ParentID_2     pgtype.Int4 `db:"parent_id_2" json:"parent_id_2"`
	ParentName     pgtype.Text `db:"parent_name" json:"parent_name"`
	ParentWaPhone  pgtype.Text `db:"parent_wa_phone" json:"parent_wa_phone"`
	OccupationID_2 pgtype.Int4 `db:"occupation_id_2" json:"occupation_id_2"`
	OccupationName pgtype.Text `db:"occupation_name" json:"occupation_name"`
}

func (q *Queries) ListSantriAscNis(ctx context.Context, arg ListSantriAscNisParams) ([]ListSantriAscNisRow, error) {
	rows, err := q.db.Query(ctx, listSantriAscNis,
		arg.Q,
		arg.ParentID,
		arg.OccupationID,
		arg.Generation,
		arg.OffsetNumber,
		arg.LimitNumber,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSantriAscNisRow{}
	for rows.Next() {
		var i ListSantriAscNisRow
		if err := rows.Scan(
			&i.ID,
			&i.Nis,
			&i.Name,
			&i.Gender,
			&i.Generation,
			&i.IsActive,
			&i.Photo,
			&i.OccupationID,
			&i.ParentID,
			&i.ParentID_2,
			&i.ParentName,
			&i.ParentWaPhone,
			&i.OccupationID_2,
			&i.OccupationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSantriAscOccupation = `-- name: ListSantriAscOccupation :many
SELECT
    santri.id, santri.nis, santri.name, santri.gender, santri.generation, santri.is_active, santri.photo, santri.occupation_id, santri.parent_id,
    "parent"."id" AS "parent_id",
    "parent"."name" AS "parent_name",
    "parent"."wa_phone" AS "parent_wa_phone",
    "santri_occupation"."id" AS "occupation_id",
    "santri_occupation"."name" AS "occupation_name"
FROM
    "santri"
    LEFT JOIN "parent" ON "santri"."parent_id" = "parent"."id"
    LEFT JOIN "santri_occupation" ON "santri"."occupation_id" = "santri_occupation"."id"
WHERE
    (
        $1 :: text IS NULL
        OR "santri"."name" ILIKE '%' || $1 || '%'
        OR "santri"."nis" ILIKE '%' || $1 || '%'
    )
    AND (
        $2 :: integer IS NULL
        OR "parent_id" = $2 :: integer
    )
    AND (
        $3 :: integer IS NULL
        OR "occupation_id" = $3 :: integer
    )
    AND (
        $4 :: integer IS NULL
        OR "generation" = $4 :: integer
    )
ORDER BY
    "occupation_id" ASC
LIMIT
    $6 OFFSET $5
`

type ListSantriAscOccupationParams struct {
	Q            pgtype.Text `db:"q" json:"q"`
	ParentID     pgtype.Int4 `db:"parent_id" json:"parent_id"`
	OccupationID pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	Generation   pgtype.Int4 `db:"generation" json:"generation"`
	OffsetNumber int32       `db:"offset_number" json:"offset_number"`
	LimitNumber  int32       `db:"limit_number" json:"limit_number"`
}

type ListSantriAscOccupationRow struct {
	ID             int32       `db:"id" json:"id"`
	Nis            pgtype.Text `db:"nis" json:"nis"`
	Name           string      `db:"name" json:"name"`
	Gender         Gender      `db:"gender" json:"gender"`
	Generation     int32       `db:"generation" json:"generation"`
	IsActive       pgtype.Bool `db:"is_active" json:"is_active"`
	Photo          pgtype.Text `db:"photo" json:"photo"`
	OccupationID   pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID       pgtype.Int4 `db:"parent_id" json:"parent_id"`
	ParentID_2     pgtype.Int4 `db:"parent_id_2" json:"parent_id_2"`
	ParentName     pgtype.Text `db:"parent_name" json:"parent_name"`
	ParentWaPhone  pgtype.Text `db:"parent_wa_phone" json:"parent_wa_phone"`
	OccupationID_2 pgtype.Int4 `db:"occupation_id_2" json:"occupation_id_2"`
	OccupationName pgtype.Text `db:"occupation_name" json:"occupation_name"`
}

func (q *Queries) ListSantriAscOccupation(ctx context.Context, arg ListSantriAscOccupationParams) ([]ListSantriAscOccupationRow, error) {
	rows, err := q.db.Query(ctx, listSantriAscOccupation,
		arg.Q,
		arg.ParentID,
		arg.OccupationID,
		arg.Generation,
		arg.OffsetNumber,
		arg.LimitNumber,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSantriAscOccupationRow{}
	for rows.Next() {
		var i ListSantriAscOccupationRow
		if err := rows.Scan(
			&i.ID,
			&i.Nis,
			&i.Name,
			&i.Gender,
			&i.Generation,
			&i.IsActive,
			&i.Photo,
			&i.OccupationID,
			&i.ParentID,
			&i.ParentID_2,
			&i.ParentName,
			&i.ParentWaPhone,
			&i.OccupationID_2,
			&i.OccupationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSantri = `-- name: UpdateSantri :one
UPDATE
    "santri"
SET
    "nis" = $1,
    "name" = $2,
    "generation" = $3,
    "is_active" = $4 :: boolean,
    "photo" = $5 :: text,
    "occupation_id" = $6,
    "parent_id" = $7 :: integer
WHERE
    "id" = $8 RETURNING id, nis, name, gender, generation, is_active, photo, occupation_id, parent_id
`

type UpdateSantriParams struct {
	Nis          pgtype.Text `db:"nis" json:"nis"`
	Name         string      `db:"name" json:"name"`
	Generation   int32       `db:"generation" json:"generation"`
	IsActive     bool        `db:"is_active" json:"is_active"`
	Photo        pgtype.Text `db:"photo" json:"photo"`
	OccupationID pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID     pgtype.Int4 `db:"parent_id" json:"parent_id"`
	ID           int32       `db:"id" json:"id"`
}

func (q *Queries) UpdateSantri(ctx context.Context, arg UpdateSantriParams) (Santri, error) {
	row := q.db.QueryRow(ctx, updateSantri,
		arg.Nis,
		arg.Name,
		arg.Generation,
		arg.IsActive,
		arg.Photo,
		arg.OccupationID,
		arg.ParentID,
		arg.ID,
	)
	var i Santri
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
	)
	return i, err
}
