// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: arduino.sql

package persistence

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArduino = `-- name: CreateArduino :one
INSERT INTO
    "arduino" ("name")
VALUES
    ($1) RETURNING id, name
`

func (q *Queries) CreateArduino(ctx context.Context, name string) (Arduino, error) {
	row := q.db.QueryRow(ctx, createArduino, name)
	var i Arduino
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteArduino = `-- name: DeleteArduino :one
DELETE FROM
    "arduino"
WHERE
    "id" = $1 RETURNING id, name
`

func (q *Queries) DeleteArduino(ctx context.Context, id int32) (Arduino, error) {
	row := q.db.QueryRow(ctx, deleteArduino, id)
	var i Arduino
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listArduinos = `-- name: ListArduinos :many
SELECT
    "arduino"."id" AS "id",
    "arduino"."name" AS "name",
    "arduino_mode"."id" AS "arduino_mode.id",
    "arduino_mode"."mode" AS "arduino_mode.mode",
    "arduino_mode"."input_topic" AS "arduino_mode.input_topic",
    "arduino_mode"."acknowledgment_topic" AS "arduino_mode.acknowledgement_topic"
FROM
    "arduino"
LEFT JOIN
    "arduino_mode" ON "arduino"."id" = "arduino_mode"."arduino_id"
`

type ListArduinosRow struct {
	ID                              int32               `db:"id"`
	Name                            string              `db:"name"`
	ArduinoModeID                   pgtype.Int4         `db:"arduino_mode.id"`
	ArduinoModeMode                 NullArduinoModeType `db:"arduino_mode.mode"`
	ArduinoModeInputTopic           pgtype.Text         `db:"arduino_mode.input_topic"`
	ArduinoModeAcknowledgementTopic pgtype.Text         `db:"arduino_mode.acknowledgement_topic"`
}

func (q *Queries) ListArduinos(ctx context.Context) ([]ListArduinosRow, error) {
	rows, err := q.db.Query(ctx, listArduinos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListArduinosRow{}
	for rows.Next() {
		var i ListArduinosRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ArduinoModeID,
			&i.ArduinoModeMode,
			&i.ArduinoModeInputTopic,
			&i.ArduinoModeAcknowledgementTopic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArduino = `-- name: UpdateArduino :one
UPDATE
    "arduino"
SET
    "name" = COALESCE($1, name)
WHERE
    "id" = $2 RETURNING id, name
`

type UpdateArduinoParams struct {
	Name pgtype.Text `db:"name"`
	ID   int32       `db:"id"`
}

func (q *Queries) UpdateArduino(ctx context.Context, arg UpdateArduinoParams) (Arduino, error) {
	row := q.db.QueryRow(ctx, updateArduino, arg.Name, arg.ID)
	var i Arduino
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
