// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package persistence

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT
    COUNT(*) AS "count"
FROM
    "user"
    LEFT JOIN "parent" ON "user"."id" = "parent"."user_id"
    LEFT JOIN "employee" ON "user"."id" = "employee"."user_id"
WHERE
    (
        $1 :: text IS NULL
        OR "username" ILIKE '%' || $1 || '%'
    )
    AND (
        $2 :: user_role IS NULL
        OR "role" = $2
    )
    AND (
        $3 :: boolean IS NULL
        OR (
            $3 = TRUE
            AND (
                parent.id IS NOT NULL
                OR employee.id IS NOT NULL
            )
        )
        OR (
            $3 = FALSE
            AND parent.id IS NULL
            AND employee.id IS NULL
        )
    )
`

type CountUsersParams struct {
	Q        pgtype.Text  `db:"q"`
	Role     NullUserRole `db:"role"`
	HasOwner pgtype.Bool  `db:"has_owner"`
}

func (q *Queries) CountUsers(ctx context.Context, arg CountUsersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, arg.Q, arg.Role, arg.HasOwner)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    "user" ("role", "username", "password")
VALUES
    (
        $1 :: user_role,
        $2 :: text,
        $3 :: text
    ) RETURNING id, role, username, password
`

type CreateUserParams struct {
	Role     UserRole `db:"role"`
	Username string   `db:"username"`
	Password string   `db:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Role, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM
    "user"
WHERE
    "id" = $1 RETURNING id, role, username, password
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    "user"."id",
    "user"."role",
    "user"."username",
    "user"."password"
FROM
    "user"
WHERE
    (
        $1::integer IS NOT NULL
        AND "id" = $1::integer
    )
    OR (
        $2::text IS NOT NULL
        AND "username" = $2::text
    )
LIMIT
    1
`

type GetUserParams struct {
	ID       pgtype.Int4 `db:"id"`
	Username pgtype.Text `db:"username"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    "user"
SET
    "role" = COALESCE($1::user_role, "role"),
    "username" = COALESCE($2, "username"),
    "password" = COALESCE($3, "password")
WHERE
    "id" = $4 RETURNING id, role, username, password
`

type UpdateUserParams struct {
	Role     NullUserRole `db:"role"`
	Username pgtype.Text  `db:"username"`
	Password pgtype.Text  `db:"password"`
	ID       int32        `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Role,
		arg.Username,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Password,
	)
	return i, err
}
