// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package persistence

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ArduinoModeType string

const (
	ArduinoModeTypeEntry    ArduinoModeType = "entry"
	ArduinoModeTypePresence ArduinoModeType = "presence"
	ArduinoModeTypeExcuse   ArduinoModeType = "excuse"
)

func (e *ArduinoModeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArduinoModeType(s)
	case string:
		*e = ArduinoModeType(s)
	default:
		return fmt.Errorf("unsupported scan type for ArduinoModeType: %T", src)
	}
	return nil
}

type NullArduinoModeType struct {
	ArduinoModeType ArduinoModeType `json:"arduino_mode_type"`
	Valid           bool            `json:"valid"` // Valid is true if ArduinoModeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArduinoModeType) Scan(value interface{}) error {
	if value == nil {
		ns.ArduinoModeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArduinoModeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArduinoModeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArduinoModeType), nil
}

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender `json:"gender"`
	Valid  bool   `json:"valid"` // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type PresenceCreatedBy string

const (
	PresenceCreatedBySystem PresenceCreatedBy = "system"
	PresenceCreatedByTap    PresenceCreatedBy = "tap"
	PresenceCreatedByAdmin  PresenceCreatedBy = "admin"
)

func (e *PresenceCreatedBy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PresenceCreatedBy(s)
	case string:
		*e = PresenceCreatedBy(s)
	default:
		return fmt.Errorf("unsupported scan type for PresenceCreatedBy: %T", src)
	}
	return nil
}

type NullPresenceCreatedBy struct {
	PresenceCreatedBy PresenceCreatedBy `json:"presence_created_by"`
	Valid             bool              `json:"valid"` // Valid is true if PresenceCreatedBy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPresenceCreatedBy) Scan(value interface{}) error {
	if value == nil {
		ns.PresenceCreatedBy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PresenceCreatedBy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPresenceCreatedBy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PresenceCreatedBy), nil
}

type PresenceType string

const (
	PresenceTypeAlpha      PresenceType = "alpha"
	PresenceTypePermission PresenceType = "permission"
	PresenceTypeSick       PresenceType = "sick"
	PresenceTypeLate       PresenceType = "late"
	PresenceTypePresent    PresenceType = "present"
)

func (e *PresenceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PresenceType(s)
	case string:
		*e = PresenceType(s)
	default:
		return fmt.Errorf("unsupported scan type for PresenceType: %T", src)
	}
	return nil
}

type NullPresenceType struct {
	PresenceType PresenceType `json:"presence_type"`
	Valid        bool         `json:"valid"` // Valid is true if PresenceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPresenceType) Scan(value interface{}) error {
	if value == nil {
		ns.PresenceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PresenceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPresenceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PresenceType), nil
}

type SantriOrderBy string

const (
	SantriOrderByAscName        SantriOrderBy = "asc:name"
	SantriOrderByAscNis         SantriOrderBy = "asc:nis"
	SantriOrderByAscGeneration  SantriOrderBy = "asc:generation"
	SantriOrderByDescName       SantriOrderBy = "desc:name"
	SantriOrderByDescNis        SantriOrderBy = "desc:nis"
	SantriOrderByDescGeneration SantriOrderBy = "desc:generation"
)

func (e *SantriOrderBy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SantriOrderBy(s)
	case string:
		*e = SantriOrderBy(s)
	default:
		return fmt.Errorf("unsupported scan type for SantriOrderBy: %T", src)
	}
	return nil
}

type NullSantriOrderBy struct {
	SantriOrderBy SantriOrderBy `json:"santri_order_by"`
	Valid         bool          `json:"valid"` // Valid is true if SantriOrderBy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSantriOrderBy) Scan(value interface{}) error {
	if value == nil {
		ns.SantriOrderBy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SantriOrderBy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSantriOrderBy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SantriOrderBy), nil
}

type SantriPermissionType string

const (
	SantriPermissionTypeSick       SantriPermissionType = "sick"
	SantriPermissionTypePermission SantriPermissionType = "permission"
)

func (e *SantriPermissionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SantriPermissionType(s)
	case string:
		*e = SantriPermissionType(s)
	default:
		return fmt.Errorf("unsupported scan type for SantriPermissionType: %T", src)
	}
	return nil
}

type NullSantriPermissionType struct {
	SantriPermissionType SantriPermissionType `json:"santri_permission_type"`
	Valid                bool                 `json:"valid"` // Valid is true if SantriPermissionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSantriPermissionType) Scan(value interface{}) error {
	if value == nil {
		ns.SantriPermissionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SantriPermissionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSantriPermissionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SantriPermissionType), nil
}

type UserRole string

const (
	UserRoleSuperadmin UserRole = "superadmin"
	UserRoleAdmin      UserRole = "admin"
	UserRoleEmployee   UserRole = "employee"
	UserRoleParent     UserRole = "parent"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Arduino struct {
	ID int32 `db:"id" json:"id"`
	// ex: arduino1
	Name string `db:"name" json:"name"`
}

type ArduinoMode struct {
	ID             int32           `db:"id" json:"id"`
	Mode           ArduinoModeType `db:"mode" json:"mode"`
	TopicPublish   string          `db:"topic_publish" json:"topic_publish"`
	TopicSubscribe string          `db:"topic_subscribe" json:"topic_subscribe"`
	ArduinoID      int32           `db:"arduino_id" json:"arduino_id"`
}

type Employee struct {
	ID           int32       `db:"id" json:"id"`
	Nip          pgtype.Text `db:"nip" json:"nip"`
	Name         string      `db:"name" json:"name"`
	Gender       Gender      `db:"gender" json:"gender"`
	Photo        pgtype.Text `db:"photo" json:"photo"`
	OccupationID int32       `db:"occupation_id" json:"occupation_id"`
	UserID       pgtype.Int4 `db:"user_id" json:"user_id"`
}

type EmployeeOccupation struct {
	ID          int32       `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
}

type EmployeePermission struct {
	ID              int32       `db:"id" json:"id"`
	EmployeeID      int32       `db:"employee_id" json:"employee_id"`
	ScheduleID      int32       `db:"schedule_id" json:"schedule_id"`
	ScheduleName    string      `db:"schedule_name" json:"schedule_name"`
	StartPermission pgtype.Time `db:"start_permission" json:"start_permission"`
	// waktu kembali, null berarti pulang
	EndPermission pgtype.Time `db:"end_permission" json:"end_permission"`
	Reason        string      `db:"reason" json:"reason"`
	// Pulang, keluar sementara
	IsGoHome pgtype.Bool `db:"is_go_home" json:"is_go_home"`
}

type EmployeePresence struct {
	ID         pgtype.Int4  `db:"id" json:"id"`
	ScheduleID pgtype.Int4  `db:"schedule_id" json:"schedule_id"`
	Type       PresenceType `db:"type" json:"type"`
	EmployeeID int32        `db:"employee_id" json:"employee_id"`
	Notes      pgtype.Text  `db:"notes" json:"notes"`
}

type EmployeeSchedule struct {
	ID int32 `db:"id" json:"id"`
	// ex: Pagi, siang, sore, malam
	Name          string      `db:"name" json:"name"`
	StartPresence pgtype.Time `db:"start_presence" json:"start_presence"`
	// Waktu jenis
	StartTime  pgtype.Time `db:"start_time" json:"start_time"`
	FinishTime pgtype.Time `db:"finish_time" json:"finish_time"`
}

type Holiday struct {
	ID int32 `db:"id" json:"id"`
	// Optional description of the holiday
	Name        string      `db:"name" json:"name"`
	Color       pgtype.Text `db:"color" json:"color"`
	Description pgtype.Text `db:"description" json:"description"`
}

type HolidayDay struct {
	ID        int32       `db:"id" json:"id"`
	Date      pgtype.Date `db:"date" json:"date"`
	HolidayID int32       `db:"holiday_id" json:"holiday_id"`
}

type Parent struct {
	ID             int32       `db:"id" json:"id"`
	Name           string      `db:"name" json:"name"`
	Address        string      `db:"address" json:"address"`
	Gender         Gender      `db:"gender" json:"gender"`
	WhatsappNumber pgtype.Text `db:"whatsapp_number" json:"whatsapp_number"`
	Photo          pgtype.Text `db:"photo" json:"photo"`
	UserID         pgtype.Int4 `db:"user_id" json:"user_id"`
}

type Rfid struct {
	ID        int32              `db:"id" json:"id"`
	Uid       string             `db:"uid" json:"uid"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	IsActive  bool               `db:"is_active" json:"is_active"`
	// Rfid bisa milik santri
	SantriID pgtype.Int4 `db:"santri_id" json:"santri_id"`
	// Rfid bisa milik employee
	EmployeeID pgtype.Int4 `db:"employee_id" json:"employee_id"`
}

type Santri struct {
	ID     int32       `db:"id" json:"id"`
	Nis    pgtype.Text `db:"nis" json:"nis"`
	Name   string      `db:"name" json:"name"`
	Gender Gender      `db:"gender" json:"gender"`
	// ex: 2024, 2022
	Generation   int32       `db:"generation" json:"generation"`
	IsActive     pgtype.Bool `db:"is_active" json:"is_active"`
	Photo        pgtype.Text `db:"photo" json:"photo"`
	OccupationID pgtype.Int4 `db:"occupation_id" json:"occupation_id"`
	ParentID     pgtype.Int4 `db:"parent_id" json:"parent_id"`
}

type SantriOccupation struct {
	ID          int32       `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
}

type SantriPermission struct {
	ID              int32                `db:"id" json:"id"`
	SantriID        int32                `db:"santri_id" json:"santri_id"`
	Type            SantriPermissionType `db:"type" json:"type"`
	StartPermission pgtype.Timestamptz   `db:"start_permission" json:"start_permission"`
	// Waktu berakhir, jika pulang, maka setting end permissionnya di akhir waktu berakhirnya schedule yang terakhir
	EndPermission pgtype.Timestamptz `db:"end_permission" json:"end_permission"`
	Excuse        string             `db:"excuse" json:"excuse"`
}

type SantriPresence struct {
	ID pgtype.Int4 `db:"id" json:"id"`
	// Karena bisa saja activitynya dihapus
	ScheduleID int32 `db:"schedule_id" json:"schedule_id"`
	// menggunakan name, karena jika activity dihapus, atau diubah maka masih tetap ada presence nya, karena bersifat history
	ScheduleName string             `db:"schedule_name" json:"schedule_name"`
	Type         PresenceType       `db:"type" json:"type"`
	SantriID     int32              `db:"santri_id" json:"santri_id"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	CreatedBy    PresenceCreatedBy  `db:"created_by" json:"created_by"`
	Notes        pgtype.Text        `db:"notes" json:"notes"`
	// Jika izin ditengah kegiatan maka akan diisi
	SantriPermissionID pgtype.Int4 `db:"santri_permission_id" json:"santri_permission_id"`
}

type SantriSchedule struct {
	ID            int32       `db:"id" json:"id"`
	Name          string      `db:"name" json:"name"`
	Description   pgtype.Text `db:"description" json:"description"`
	StartPresence pgtype.Time `db:"start_presence" json:"start_presence"`
	// Waktu mulai kegiatan
	StartTime pgtype.Time `db:"start_time" json:"start_time"`
	// Waktu berakhirnya kegiatan
	FinishTime pgtype.Time `db:"finish_time" json:"finish_time"`
}

type User struct {
	ID       int32        `db:"id" json:"id"`
	Role     NullUserRole `db:"role" json:"role"`
	Username pgtype.Text  `db:"username" json:"username"`
	Password pgtype.Text  `db:"password" json:"password"`
}
