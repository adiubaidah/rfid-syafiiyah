// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: arduino_mode.sql

package persistence

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateArduinoModesParams struct {
	Mode                 ArduinoModeType `db:"mode"`
	InputTopic           string          `db:"input_topic"`
	AcknowledgementTopic string          `db:"acknowledgement_topic"`
	ArduinoID            int32           `db:"arduino_id"`
}

const deleteArduinoMode = `-- name: DeleteArduinoMode :one
DELETE FROM
    "arduino_mode"
WHERE
    "id" = $1 RETURNING id, mode, input_topic, acknowledgment_topic, arduino_id
`

func (q *Queries) DeleteArduinoMode(ctx context.Context, id int32) (ArduinoMode, error) {
	row := q.db.QueryRow(ctx, deleteArduinoMode, id)
	var i ArduinoMode
	err := row.Scan(
		&i.ID,
		&i.Mode,
		&i.InputTopic,
		&i.AcknowledgmentTopic,
		&i.ArduinoID,
	)
	return i, err
}

const listArduinoModes = `-- name: ListArduinoModes :many
SELECT
    id, mode, input_topic, acknowledgment_topic, arduino_id
FROM
    "arduino_mode"
WHERE
    arduino_id = $1
`

func (q *Queries) ListArduinoModes(ctx context.Context, arduinoID int32) ([]ArduinoMode, error) {
	rows, err := q.db.Query(ctx, listArduinoModes, arduinoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArduinoMode{}
	for rows.Next() {
		var i ArduinoMode
		if err := rows.Scan(
			&i.ID,
			&i.Mode,
			&i.InputTopic,
			&i.AcknowledgmentTopic,
			&i.ArduinoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArduinoMode = `-- name: UpdateArduinoMode :one
UPDATE
    "arduino_mode"
SET
    "mode" = COALESCE($1),
    "input_topic" = COALESCE($2, input_topic),
    "acknowledgment_topic" = COALESCE($3, acknowledgement_topic)
WHERE
    "id" = $4 RETURNING id, mode, input_topic, acknowledgment_topic, arduino_id
`

type UpdateArduinoModeParams struct {
	Mode                 NullArduinoModeType `db:"mode"`
	InputTopic           pgtype.Text         `db:"input_topic"`
	AcknowledgementTopic pgtype.Text         `db:"acknowledgement_topic"`
	ID                   int32               `db:"id"`
}

func (q *Queries) UpdateArduinoMode(ctx context.Context, arg UpdateArduinoModeParams) (ArduinoMode, error) {
	row := q.db.QueryRow(ctx, updateArduinoMode,
		arg.Mode,
		arg.InputTopic,
		arg.AcknowledgementTopic,
		arg.ID,
	)
	var i ArduinoMode
	err := row.Scan(
		&i.ID,
		&i.Mode,
		&i.InputTopic,
		&i.AcknowledgmentTopic,
		&i.ArduinoID,
	)
	return i, err
}
