// santri.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: santri_schedule.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SantriScheduleService_CreateSantriSchedule_FullMethodName  = "/SantriScheduleService/CreateSantriSchedule"
	SantriScheduleService_ListSantriSchedule_FullMethodName    = "/SantriScheduleService/ListSantriSchedule"
	SantriScheduleService_CurrentSantriSchedule_FullMethodName = "/SantriScheduleService/CurrentSantriSchedule"
	SantriScheduleService_GetSantriSchedule_FullMethodName     = "/SantriScheduleService/GetSantriSchedule"
	SantriScheduleService_UpdateSantriSchedule_FullMethodName  = "/SantriScheduleService/UpdateSantriSchedule"
	SantriScheduleService_DeleteSantriSchedule_FullMethodName  = "/SantriScheduleService/DeleteSantriSchedule"
)

// SantriScheduleServiceClient is the client API for SantriScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SantriScheduleServiceClient interface {
	CreateSantriSchedule(ctx context.Context, in *CreateSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error)
	ListSantriSchedule(ctx context.Context, in *ListSantriScheduleRequest, opts ...grpc.CallOption) (*ListSantriScheduleResponse, error)
	CurrentSantriSchedule(ctx context.Context, in *CurrentSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error)
	GetSantriSchedule(ctx context.Context, in *GetSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error)
	UpdateSantriSchedule(ctx context.Context, in *UpdateSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error)
	DeleteSantriSchedule(ctx context.Context, in *DeleteSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error)
}

type santriScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSantriScheduleServiceClient(cc grpc.ClientConnInterface) SantriScheduleServiceClient {
	return &santriScheduleServiceClient{cc}
}

func (c *santriScheduleServiceClient) CreateSantriSchedule(ctx context.Context, in *CreateSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SantriSchedule)
	err := c.cc.Invoke(ctx, SantriScheduleService_CreateSantriSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *santriScheduleServiceClient) ListSantriSchedule(ctx context.Context, in *ListSantriScheduleRequest, opts ...grpc.CallOption) (*ListSantriScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSantriScheduleResponse)
	err := c.cc.Invoke(ctx, SantriScheduleService_ListSantriSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *santriScheduleServiceClient) CurrentSantriSchedule(ctx context.Context, in *CurrentSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SantriSchedule)
	err := c.cc.Invoke(ctx, SantriScheduleService_CurrentSantriSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *santriScheduleServiceClient) GetSantriSchedule(ctx context.Context, in *GetSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SantriSchedule)
	err := c.cc.Invoke(ctx, SantriScheduleService_GetSantriSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *santriScheduleServiceClient) UpdateSantriSchedule(ctx context.Context, in *UpdateSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SantriSchedule)
	err := c.cc.Invoke(ctx, SantriScheduleService_UpdateSantriSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *santriScheduleServiceClient) DeleteSantriSchedule(ctx context.Context, in *DeleteSantriScheduleRequest, opts ...grpc.CallOption) (*SantriSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SantriSchedule)
	err := c.cc.Invoke(ctx, SantriScheduleService_DeleteSantriSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SantriScheduleServiceServer is the server API for SantriScheduleService service.
// All implementations must embed UnimplementedSantriScheduleServiceServer
// for forward compatibility.
type SantriScheduleServiceServer interface {
	CreateSantriSchedule(context.Context, *CreateSantriScheduleRequest) (*SantriSchedule, error)
	ListSantriSchedule(context.Context, *ListSantriScheduleRequest) (*ListSantriScheduleResponse, error)
	CurrentSantriSchedule(context.Context, *CurrentSantriScheduleRequest) (*SantriSchedule, error)
	GetSantriSchedule(context.Context, *GetSantriScheduleRequest) (*SantriSchedule, error)
	UpdateSantriSchedule(context.Context, *UpdateSantriScheduleRequest) (*SantriSchedule, error)
	DeleteSantriSchedule(context.Context, *DeleteSantriScheduleRequest) (*SantriSchedule, error)
	mustEmbedUnimplementedSantriScheduleServiceServer()
}

// UnimplementedSantriScheduleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSantriScheduleServiceServer struct{}

func (UnimplementedSantriScheduleServiceServer) CreateSantriSchedule(context.Context, *CreateSantriScheduleRequest) (*SantriSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSantriSchedule not implemented")
}
func (UnimplementedSantriScheduleServiceServer) ListSantriSchedule(context.Context, *ListSantriScheduleRequest) (*ListSantriScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSantriSchedule not implemented")
}
func (UnimplementedSantriScheduleServiceServer) CurrentSantriSchedule(context.Context, *CurrentSantriScheduleRequest) (*SantriSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSantriSchedule not implemented")
}
func (UnimplementedSantriScheduleServiceServer) GetSantriSchedule(context.Context, *GetSantriScheduleRequest) (*SantriSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSantriSchedule not implemented")
}
func (UnimplementedSantriScheduleServiceServer) UpdateSantriSchedule(context.Context, *UpdateSantriScheduleRequest) (*SantriSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSantriSchedule not implemented")
}
func (UnimplementedSantriScheduleServiceServer) DeleteSantriSchedule(context.Context, *DeleteSantriScheduleRequest) (*SantriSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSantriSchedule not implemented")
}
func (UnimplementedSantriScheduleServiceServer) mustEmbedUnimplementedSantriScheduleServiceServer() {}
func (UnimplementedSantriScheduleServiceServer) testEmbeddedByValue()                               {}

// UnsafeSantriScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SantriScheduleServiceServer will
// result in compilation errors.
type UnsafeSantriScheduleServiceServer interface {
	mustEmbedUnimplementedSantriScheduleServiceServer()
}

func RegisterSantriScheduleServiceServer(s grpc.ServiceRegistrar, srv SantriScheduleServiceServer) {
	// If the following call pancis, it indicates UnimplementedSantriScheduleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SantriScheduleService_ServiceDesc, srv)
}

func _SantriScheduleService_CreateSantriSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSantriScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SantriScheduleServiceServer).CreateSantriSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SantriScheduleService_CreateSantriSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SantriScheduleServiceServer).CreateSantriSchedule(ctx, req.(*CreateSantriScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SantriScheduleService_ListSantriSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSantriScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SantriScheduleServiceServer).ListSantriSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SantriScheduleService_ListSantriSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SantriScheduleServiceServer).ListSantriSchedule(ctx, req.(*ListSantriScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SantriScheduleService_CurrentSantriSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentSantriScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SantriScheduleServiceServer).CurrentSantriSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SantriScheduleService_CurrentSantriSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SantriScheduleServiceServer).CurrentSantriSchedule(ctx, req.(*CurrentSantriScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SantriScheduleService_GetSantriSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSantriScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SantriScheduleServiceServer).GetSantriSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SantriScheduleService_GetSantriSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SantriScheduleServiceServer).GetSantriSchedule(ctx, req.(*GetSantriScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SantriScheduleService_UpdateSantriSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSantriScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SantriScheduleServiceServer).UpdateSantriSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SantriScheduleService_UpdateSantriSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SantriScheduleServiceServer).UpdateSantriSchedule(ctx, req.(*UpdateSantriScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SantriScheduleService_DeleteSantriSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSantriScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SantriScheduleServiceServer).DeleteSantriSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SantriScheduleService_DeleteSantriSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SantriScheduleServiceServer).DeleteSantriSchedule(ctx, req.(*DeleteSantriScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SantriScheduleService_ServiceDesc is the grpc.ServiceDesc for SantriScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SantriScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SantriScheduleService",
	HandlerType: (*SantriScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSantriSchedule",
			Handler:    _SantriScheduleService_CreateSantriSchedule_Handler,
		},
		{
			MethodName: "ListSantriSchedule",
			Handler:    _SantriScheduleService_ListSantriSchedule_Handler,
		},
		{
			MethodName: "CurrentSantriSchedule",
			Handler:    _SantriScheduleService_CurrentSantriSchedule_Handler,
		},
		{
			MethodName: "GetSantriSchedule",
			Handler:    _SantriScheduleService_GetSantriSchedule_Handler,
		},
		{
			MethodName: "UpdateSantriSchedule",
			Handler:    _SantriScheduleService_UpdateSantriSchedule_Handler,
		},
		{
			MethodName: "DeleteSantriSchedule",
			Handler:    _SantriScheduleService_DeleteSantriSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "santri_schedule.proto",
}
