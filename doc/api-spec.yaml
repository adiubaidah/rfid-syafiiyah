openapi: "3.0.3"
info:
  title: Rest API As-Syafi'iyah
  version: "1.0"
  description: Rest API Syaiifyah Sidoarjo Documentation using Golang
servers:
  - url: https://api.assyafiiyah.com
    description: Production Server
  - url: https://syafiiyah-api.adiiskandar.my.id
    description: Development Server
paths:
  /auth/sign-in:
    post:
      tags:
        - Auth
      summary: Sign In
      description: Sign In will set cookie for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 401
                  status: error
                  message: "Invalid username or password"
  /auth/sign-out:
    post:
      tags:
        - Auth
      summary: Sign Out
      security:
        - cookieAuth: []
      description: Sign Out
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example: 
                  code: 204
                  status: success
                  message: Sign out success
  /auth/is-auth:
    get:
      tags:
        - Auth
      summary: Check Auth
      description: Check Auth
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data: 
                        type: object
                        properties:
                          id:
                            type: integer
                          username:
                            type: string
                          role:
                            $ref: "#/components/schemas/RoleEnum"
  /profile/reset-password:
    put:
      tags:
        - Profile
      summary: Reset password
      description: Admin, superadmin, parent, employee can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
                confirm_new_password:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
              example:
                code: 200
                status: success
                message: Password has ben resetted
  /profile:
    get:
      tags:
        - Profile
      summary: Get Profile
      description: Get From Cookie
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Parent"
                  - $ref: "#/components/schemas/Employee"
      
  /user:
    get:
      tags:
        - User
      summary: Get All User
      security:
        - cookieAuth: []
      description: Only Admin, superadmin can access this endpoint
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit per page
        - in: query
          name: order
          schema:
            type: string
            enum:
              - "asc:username"
              - "desc:username"
              - "asc:name"
              - "desc:name"
        - in: query
          name: role
          schema:
            $ref: "#/components/schemas/RoleEnum"
          required: false
          description: Filter by role
        - in: query
          name: has-owner
          required: false
          schema:
            type: integer
            description: Owner can be with parent or employee
            enum:
              - 1
              - 0
              - -1
          examples:
            has-owner:
              value: 1
            no-owner:
              value: -1
            all:
              value: 0
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search by username
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/UserWithRelation"
                          pagination:
                            $ref: "#/components/schemas/Pagination"
                
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forbidden"
    post:
      tags:
        - User
      summary: Create User
      security:
        - cookieAuth: []
      description: Only superadmin can manage this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/NewUserWithPassword"
                - properties:
                    relation_id:
                      description: It can be parent or employee
                      nullable: true
                      type: integer
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/UserWithRelation"
                
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 400
                  status: error
                  message: "Invalid request"
        "409":
          description: Duplicate
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
              examples:
                username:
                  value:
                    code: 409
                    status: error
                    message: "Username already exists"
                relation-parent:
                  value:
                    code: 409
                    status: error
                    message: Parent with id ... has been related
                relation-employee:
                  value:
                    code: 409
                    status: error
                    message: Employee with id ... has been related
        
  /user/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      tags:
        - User
      summary: Get User By ID
      security:
        - cookieAuth: []
      description: Only superadmin can manage this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/UserWithRelation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                example:
                  code: 404
                  status: error
                  message: "User not found"
    put:
      tags:
        - User
      summary: Update User By ID
      security:
        - cookieAuth: []
      description: Only superadmin can manage this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/NewUserWithPassword"
                - properties:
                    relation_id:
                      description: It can be parent or employee
                      nullable: true
                      type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data: 
                        allOf:
                          - properties:
                              id:
                                $ref: "#/components/schemas/Id"
                          - $ref: "#/components/schemas/UserWithRelation"
                   
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                example:
                  code: 404
                  status: error
                  message: "User not found"
        "409":
          description: Duplicate
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
              examples:
                username:
                  value:
                    code: 409
                    status: error
                    message: "Username already exists"
                relation-parent:
                  value:
                    code: 409
                    status: error
                    message: Parent with id ... has been related
                relation-employee:
                  value:
                    code: 409
                    status: error
                    message: Employee with id ... has been related
    delete:
      tags:
        - User
      summary: Delete User By ID
      security:
        - cookieAuth: []
      description: Superadmin can manage this endpoint
      responses:
        "200":
          description: No Content
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/User"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "User not found"
  /santri-schedule:
    get:
      tags:
        - Santri Schedule
      summary: Get All Santri schedule
      description: All can access this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/SantriSchedule"

    post:
      tags:
        - Santri Schedule
      summary: Create Santri schedule
      description: Only Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSantriSchedule"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/SantriSchedule"
        "409":
          description: Duplicate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                code: 409
                status: error
                example: schedule time already exist
  /santri-schedule/{id}:
    parameters:
      - in: path
        required: true
        name: id
        schema:
          type: integer
    put:
      tags:
        - Santri Schedule
      summary: Update Santri schedule
      security:
        - cookieAuth: []
      description: Only Superadmin can manage this endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSantriSchedule"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/SantriSchedule"
        "409":
          description: Duplicate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                code: 409
                status: error
                message: schedule time already exist
    delete:
      tags:
        - Santri Schedule
      summary: Delete Santri schedule
      security:
        - cookieAuth: []
      description: Only Superadmin can manage this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/SantriSchedule"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                code: 404
                status: error
                message: Santri schedule not found

  /holiday:
    get:
      tags:
        - Holiday
      summary: Get All Holiday
      description: Get All Holiday
      parameters:
        - in: query
          name: q
          description: Name of the holiday
          schema:
            type: string
        - in: query
          name: from
          schema:
            type: string
          required: false
          example: "2024-12-25"
          description: Filter by from date
        - in: query
          name: to
          schema:
            type: string
          required: false
          example: "2024-12-27"
          description: Filter by to date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Holiday"

    post:
      tags:
        - Holiday
      summary: Create Holiday
      description: Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewHoliday"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Holiday"
        "409":
          description: Duplicate
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 409
                  status: error
                  message: Date range already exists
                
              
  /holiday/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    put:
      tags:
        - Holiday
      summary: Update Holiday By ID
      description: Only Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewHoliday"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Holiday"
        "409":
          description: Duplicate
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 409
                  status: error
                  message: Date range already exists
    delete:
      tags:
        - Holiday
      summary: Delete Holiday By ID
      description: Only Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Holiday"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Santri Occupation not found"
      
  /santri-occupation:
    get:
      tags:
        - Santri Occupation
      summary: Get All Santri Occupation
      description: Get All Santri Occupation
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search Occupation by name
          example: "Penjaga Pos"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: "#/components/schemas/SantriOccupation"
                          properties:
                            count:
                              type: integer
                              description: Count of santri
                          
    post:
      tags:
        - Santri Occupation
      summary: Create Santri Occupation
      security:
        - cookieAuth: []
      description: Create Santri Occupation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSantriOccupation"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/SantriOccupation"
  /santri-occupation/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Santri Occupation
      summary: Get Santri Occupation By ID
      description: Get Santri Occupation By ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/SantriOccupation"
                        properties:
                          count:
                            type: integer
                            description: Count of santri
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Santri Occupation not found"
    put:
      tags:
        - Santri Occupation
      summary: Update Santri Occupation By ID
      security:
        - cookieAuth: []
      description: Update Santri Occupation By ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSantriOccupation"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/SantriOccupation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Santri Occupation not found"
    delete:
      tags:
        - Santri Occupation
      summary: Delete Santri Occupation By ID
      security:
        - cookieAuth: []
      description: Delete Santri Occupation By ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/SantriOccupation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Santri Occupation not found"
  /santri:
    get:
      tags:
        - Santri
      summary: Get All Santri
      description: Get All Santri
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit per page
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search Santri by name
          example: "Muhammad"
        - in: query
          name: is_active
          schema:
            type: integer
          examples:
            active:
              value: 1
            not-active:
              value: -1
            all:
              value: 0
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc:name
              - desc:name
          examples:
            asc-name:
              value: asc:name
            desc-name:
              value: desc:name
        - in: query
          name: occupation
          schema:
            type: integer
          required: false
          description: Filter Santri by occupation
        - in: query
          name: generation
          schema:
            type: integer
          required: false
          description: Filter santri by generation
          examples:
            2024:
              value: 2024
            2023:
              value: 2023
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: object
                        description: One for Admin, and other for Parent
                        oneOf:
                          - properties:
                              items:
                                type: array
                                items:
                                  allOf:
                                    - $ref: "#/components/schemas/Santri"
                                    - properties:
                                        occupation:
                                          $ref: "#/components/schemas/SantriOccupation"
                                        parent:
                                          $ref: "#/components/schemas/Parent"
                              pagination:
                                $ref: "#/components/schemas/Pagination"
                            description: For Admin
                          - type: array
                            items: 
                              $ref: "#/components/schemas/Santri"
                            description: For Parent
                          
                        
    post:
      tags:
        - Santri
      summary: Create Santri
      description: Create Santri
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewSantri"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Santri"
  /santri/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Santri
      summary: Get Santri By ID
      description: Get Santri By ID
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        oneOf:
                          - allOf:
                            - $ref: "#/components/schemas/Santri"
                            - properties:
                                occupation:
                                  $ref: "#/components/schemas/SantriOccupation"
                                parent:
                                  $ref: "#/components/schemas/Parent"
                          - allOf:
                              - $ref: "#/components/schemas/Santri"
                            properties:
                                occupation:
                                  $ref: "#/components/schemas/SantriOccupation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Santri not found"
    put:
      tags:
        - Santri
      summary: Update Santri By ID
      description: Only admin and Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewSantri"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Santri"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Santri not found"
    delete:
      tags:
        - Santri
      summary: Delete Santri By ID
      description: Delete Santri By ID
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Santri"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Santri not found"
  /santri-permission:
    get:
      tags:
        - Santri Permission
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit data per page
        - in: query
          name: q
          schema:
            type: integer
          description: Search by santri name
          required: false
        - in: query
          name: start-time
          schema:
            type: string
            format: YYYY-MM-DDTHH:MM:SS±HH:MM
          description: Search By Start time
        - in: query
          name: end-time
          schema:
            type: string
            format: YYYY-MM-DDTHH:MM:SS±HH:MM
          description: Search By End time
        - in: query
          name: go-home
          schema:
            type: integer
            enum:
              - 1
              - 0
              - -1
          examples:
            go-home:
              value: 1
            not-go-home:
              value: 0
            all:
              value: -1
      summary: Get All Santri Permission
      description: All can acesss this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              allOf:
                                - $ref: "#/components/schemas/SantriPermission"
                                - properties:
                                    santri:
                                      $ref: "#/components/schemas/Santri"
                                    
                          pagination:
                            $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - Santri Permission
      summary: Create Santri Permission
      description: Only Admin and Superadmin can manage this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: "#/components/schemas/NewSantriPermission"

      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SantriPermission"
  /santri-permission/{id}:
    parameters:
       - in: path
         name: id
         required: true
         schema:
           type: integer
    put:
      tags:
        - Santri Permission
      summary: Update Santri Permission By ID
      description: Only Admin and Superadmin can manage this endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSantriPermission"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/SantriPermission"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
    delete:
        tags:
          - Santri Permission
        summary: Delete Santri Permission By ID
        description: Only Admin and Superadmin can manage this endpoint
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: "#/components/schemas/Response"
                    - properties:
                        data:
                          $ref: "#/components/schemas/SantriPermission"
          "404":
            description: Not Found
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: "#/components/schemas/ResponseMessage"
  /santri-presence:
    get:
      tags:
        - Santri Presence
      summary: Get All Santri Presence
      description: All can access this endpoint
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit per page
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search by santri name
        - in: query
          name: santri
          schema:
            type: integer
          required: false
          description: Search presence by Santri ID
        - in: query
          name: schedule
          schema:
            type: integer
          description: Search presence by schedule ID
        - in: query
          name: from
          schema:
            type: string
            format: YYYY-MM-DDTHH:MM:SS±HH:MM
          description: Search By From
          required: false
        - in: query
          name: to
          schema:
            type: string
            format: YYYY-MM-DDTHH:MM:SS±HH:MM
          description: Search By End time
          required: false
        - in: query
          name: type
          schema:
            $ref: "#/components/schemas/PresenceEnum"
          examples:
            presence:
              value: "presence"
            alpha:
              value: "alpha"
            permission:
              value: "permission"
            late:
              value: "late"
            sick:
              value: "sick"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              allOf:
                                - $ref: "#/components/schemas/SantriPresence"
                                - properties:
                                    santri:
                                      $ref: "#/components/schemas/Santri"
                          pagination:
                            $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - Santri Presence
      summary: Create Santri Presence
      description: Admin and Superadmin can manage this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/NewSantriPresence"
                - properties:
                    type:
                      $ref: "#/components/schemas/PresenceEnum"
                    santri_id:
                      $ref: "#/components/schemas/Id"
                    notes:
                      nullable: true
            examples:
              from-admin:
                value:
                  type: "presence"
                  santri_id: 1
                  schedule_id: 1
                  schedule_name: Pengajian Subuh
                  notes: "Presence because error of RFID"
              from-bulk-admin:
                description: Admin can create presence in bulk
                value:
                  type: sick
                  santri_id: 1
                  notes: "Sakit"
              from-santri-permission:
                value:
                  type: permission
                  santri_id: 1
                  schedule_id: 1
                  schedule_name: Pengajian Subuh
                  created_at: "2024-11-22T13:37:00Z"
                  santri_permission_id: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SantriPresence"
  /santri-presence/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    put:
      tags:
        - Santri Presence
      summary: Update Santri Presence
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSantriPresence"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SantriPresence"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                code: 404
                status: error
                message: Santri Presence not found
    delete:
      tags:
        - Santri Presence
      summary: Delete Santri Presence By ID
      description: Only Admin and Superadmin can manage this endpoint
      requestBody:
        content:
          application/json:
            schema:
              
              type: object
              properties:
                ids:
                  type: array
                  items: 
                    $ref: "#/components/schemas/Id"
              example:
                ids: [1, 2, 3, 4]
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SantriPresence"
      
  /employee-occupation:
    get:
      tags:
        - Employee Occupation
      summary: Get All Occupation
      description: Get All occupation
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search Occupation by name
          example: "Guru"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: "#/components/schemas/EmployeeOccupation"
                            - properties:
                                count:
                                  type: integer
                                  description: Count of the employee
    post:
      tags:
        - Employee Occupation
      summary: Create Occupation
      description: Admin, Superadmin can manage endpoint
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewEmployeeOccupation"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/EmployeeOccupation"
  /employee-occupation/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Employee Occupation
      description: All can access endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/EmployeeOccupation"
    put:
      tags:
        - Employee Occupation
      summary: Update Occupation By ID
      description: Admin, Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewEmployeeOccupation"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                    - $ref: "#/components/schemas/Response"
                    - properties:
                        data:
                          $ref: "#/components/schemas/EmployeeOccupation"
    delete:
      tags: 
        - Employee Occupation
      summary: Delete Employee Occupation by ID
      description: Admin, Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/EmployeeOccupation"

  /employee-schedule:
    get:
      tags: 
        - Employee Schedule
      summary: Get All Employee Schedule
      description: Admin and Superadmin can access this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: array
                        items:
                          allOf:
                          - $ref: "#/components/schemas/EmployeeSchedule"
    post:
      tags:
        - Employee Schedule
      summary: Create Employee Schedule
      description: Superadmin can manage this endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewEmployeeSchedule"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/EmployeeSchedule"
  /employee-schedule/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    put:
      tags:
        - Employee Schedule
      summary: Update Employee Schedule By ID
      description: Superadmin can manage this endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewEmployeeSchedule"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/EmployeeSchedule"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
    delete:
      tags:
        - Employee Schedule
      summary: Delete Employee Schedule By ID
      description: Superadmin can manage this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/EmployeeSchedule"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
  /employee:
    get:
      tags:
        - Employee
      summary: Get All Employee
      description: Admin and Superadmin can access this endpoint
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number      
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit per page
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc:name
              - desc:name
          examples:
            asc-name:
              value: asc:name
            desc-name:
              value: desc:name
        - in: query
          name: has-user
          schema:
            type: integer
            nullable: false
            enum:
              - 1
              - 0
              - -1
          examples:
            has-user:
              value: 1
            no-user:
              value: -1
            all:
              value: 0
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search Employee by name
          example: "Muhammad"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Employee"
                          pagination:
                            $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - Employee
      summary: Create Employee
      description: Admin and Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewEmployee"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
  /employee/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Employee
      summary: Get Employee By ID
      description: Get Employee By ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Employee"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Employee not found"
    put:
      tags:
        - Employee
      summary: Update Employee By ID
      description: Update Employee By ID
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewEmployee"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Employee"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Employee not found"
    delete:
      tags:
        - Employee
      summary: Delete Employee By ID
      security:
        - cookieAuth: []
      description: Only Admin and Superadmin can manage this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Employee"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Employee not found"
                
                  

  /parent:
    get:
      tags:
        - Parent
      summary: Get All Parent
      description: Admin and Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit per page
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search Parent by name
          example: "Muhammad"
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc:name
              - desc:name
              - asc:generation
              - desc:generation
              - asc:nis
              - desc:nis
          examples:
            asc-name:
              value: asc:name
            desc-name:
              value: desc:name
        - in: query
          name: has-user
          schema:
            type: integer
            nullable: true
            enum:
              - 1
              - 0
              - -1
          examples:
            has-user:
              value: 1
            no-user:
              value: -1
            all:
              value: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              allOf:
                                - $ref: "#/components/schemas/Parent"
                                - properties:
                                    user:
                                      $ref: "#/components/schemas/User"
                          pagination:
                            $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - Parent
      summary: Create Parent
      description: Create Parent
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewParent"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                          $ref: "#/components/schemas/Parent"
  /parent/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Parent
      summary: Get Parent By ID
      security:
        - cookieAuth: []
      description: Admin, Parent that match the id, superadmin can access this endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:   
                      data:
                        $ref: "#/components/schemas/Parent"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forbidden"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Parent not found"
    put:
      tags:
        - Parent
      summary: Update Parent By ID
      description: Update Parent By ID
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewParent"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Parent"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Parent not found"
    delete:
      tags:
        - Parent
      summary: Delete Parent By ID
      description: Delete Parent By ID
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Parent"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "Parent not found"
  /rfid:
    get:
      tags:
        - RFID
      summary: Get All RFID
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit per page
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: Search RFID by uid or name
          example: "1234567890"
        - in: query
          name: role
          schema:
            type: string
            enum:
              - santri
              - employee
          required: false
          description: Search by role
      description: Only admin, and Superadmin can access endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data: 
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              allOf:
                                - $ref: "#/components/schemas/RFID"
                                - properties:
                                    details:
                                      oneOf:
                                        - $ref: "#/components/schemas/Santri"
                                        - $ref: "#/components/schemas/Employee"
                          pagination:
                              $ref: "#/components/schemas/Pagination"
  /rfid/{id}:
    parameters:
      - in: path
        name: Id
        schema:
          type: integer
        required: true

    put:
      tags:
        - RFID
      summary: Update RFID by ID
      description: Only Admin and Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_active:
                  type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RFID"
    delete:
      tags:
        - RFID
      summary: Delete RFID by Id
      description: Only Admin and Superadmin can manage this endpoint
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      data:
                        $ref: "#/components/schemas/RFID"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseMessage"
                example:
                  code: 404
                  status: error
                  message: "RFID not found"
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
  schemas:
    RoleEnum:
      type: string
      enum:
        - parent
        - admin
        - superadmin
        - employee
    Id:
      type: integer
      uniqueItems: true
    GenderEnum:
      type: string
      enum:
        - male
        - female
    PresenceEnum:
      type: string
      enum:
        - "alpha"
        - "permission"
        - "sick"
        - "late"
        - "present"
    Response:
      type: object
      properties:
        code:
          type: integer
          enum:
            - 200
            - 201
            - 204
            - 401
            - 403
            - 404
            - 500
        status:
          type: string
          enum:
            - success
            - error
    ResponseMessage:
      allOf:
        - $ref: "#/components/schemas/Response"
        - properties:
            message:
              type: string
    NewUser:
      type: object
      properties:
        role:
          type: string
        username:
          type: string
          uniqueItems: true
    NewUserWithPassword:
      allOf:
        - $ref: "#/components/schemas/NewUser"
        - properties:
            password:
              type: string
              nullable: true
              default: "indonesia123"
              description: System will create default password for user, if it's blank
    User:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewUser"
    UserWithRelation:
      allOf:
        - $ref: "#/components/schemas/User"
        - properties:
            details:
              type: object
              nullable: true
              description: It can be null because if is admin, or superadmin, doesn't need details of related account
              properties:
                id:
                  type: integer
                name:
                  type: string
    NewSantriSchedule:
      type:
        object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        start_presence:
          type: string
          example:
            "07:45:00"
        start_time:
          type: string
          example:
            "08:00:00"
        finish_time:
          type: string
          example:
            "15:00:00"
    SantriSchedule:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewSantriSchedule"
    NewHoliday:
      type:
        object
      properties:
        name:
          type: string
          example: Kemerdekaan
        days:
          type: array
          items:
            type: string
            example: 
              - "2024-12-25"
              - "2024-12-26"
              - "2024-12-27"
              - "2024-12-28"
            nullable: false
    Holiday:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewHoliday"    
    NewSantriOccupation:
      type:
        object
      properties:
        name:
          type: string
        description:
          type: string
    SantriOccupation:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewSantriOccupation"
    NewParent:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        gender:
          $ref: "#/components/schemas/GenderEnum"
        whatsapp_number:
          type: string
          minLength: 10
          maxLength: 13
        photo:
          type: string
          format: binary
          nullable: true
        user_id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - nullable: true
    Parent:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewParent"
    NewSantri:
      type: object
      properties:
        nis:
          type: string
          uniqueItems: true
        name:
          type: string
        gender:
          $ref: "#/components/schemas/GenderEnum"
        is_active:
          type: boolean
        generation:
          type: number
        photo:
          type: string
          format: binary
          nullable: true
        occupation_id:
          type: integer
          nullable: true
        parent_id:
          type: integer
          nullable: true
    Santri:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewSantri"
    NewSantriPermission:
      type: object
      properties:
        santri_id:
          type: integer
        start_permission:
          type: string
          example:
            "2024-10-09T07:45:00Z"
          nullable: false
        end_permission:
          type: string
          example:
            "2024-10-09T15:00:00Z"
          nullable: false
        type: 
          type: string
          enum:
            - sick
            - permission
        excuse:
          type: string
    SantriPermission:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewSantriPermission"
    NewSantriPresence:
      type: object
      properties:
        schedule_id:
          type: integer
          nullable: false
        schedule_name:
          type: string
        type:
          $ref: "#/components/schemas/PresenceEnum"
        santri_id:
          type: integer
          nullable: false
        created_at:
          type: string
          example: "2024-11-22T13:37:00Z"
        notes:
          type: string
          nullable: true
        santri_permission_id:
          type: integer
          nullable: true
    SantriPresence:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewSantriPresence"
    NewEmployeeOccupation:
      type: object
      properties:
        name: 
          type: string
        description:
          type: string
    EmployeeOccupation:
       allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewEmployeeOccupation"
    NewEmployeeSchedule:
      type:
        object
      properties:
        name:
          type: string
          example: Pagi
        description:
          type: string
          nullable: true
        start_presence:
          type: string
          example:
            "07:45:00"
        start_time:
          type: string
          example:
            "08:00:00"
        finish_time:
          type: string
          example:
            "15:00:00"
    EmployeeSchedule:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewEmployeeSchedule"
    NewEmployee:
      type: object
      properties:
        nip:
          type: string
          maxLength: 18
          minLength: 18
          uniqueItems: true
        name: 
          type: string
          maxLength: 100
        gender: 
          $ref: "#/components/schemas/GenderEnum"
        photo:
          type: string
          format: binary
          nullable: true
        occupation_id:
          type: integer
          nullable: false
        user_id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - nullable: true
    Employee:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewEmployee"
    NewRFID:
      type: object
      properties:
        uid:
          type: string
          uniqueItems: true
        created_at:
          type: string
          description: Date when RFID created
        role:
          type: string
          enum:
            - employee
            - santri
        is_active: 
          type: boolean
    RFID:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/NewRFID"
    NewArduino:
      type: object
      properties:
        name:
          type: string
          uniqueItems: true
        is_active:
          type: boolean
        properties:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - entry
                  - presence
                  - excuse
                  - ping
          example:
            - type: "entry"
            - type: "presence"
            - type: "excuse"
            - type: "ping"
    Pagination:
      type: object
      properties:
        total_items:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10
        current_page:
          type: integer
          example: 1
        items_per_page:
          type: integer
          example: 10
    Forbidden:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResponseMessage"
        - example:
            code: 403
            status: error
            message: "Forbidden"
