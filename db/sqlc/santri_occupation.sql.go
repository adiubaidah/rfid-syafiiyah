// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: santri_occupation.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSantriOccupation = `-- name: CreateSantriOccupation :one
INSERT INTO "santri_occupation" ("name", "description") VALUES ($1, $2) RETURNING id, name, description
`

type CreateSantriOccupationParams struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) CreateSantriOccupation(ctx context.Context, arg CreateSantriOccupationParams) (SantriOccupation, error) {
	row := q.db.QueryRow(ctx, createSantriOccupation, arg.Name, arg.Description)
	var i SantriOccupation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteSantriOccupation = `-- name: DeleteSantriOccupation :one
DELETE FROM "santri_occupation" WHERE "id" = $1 RETURNING id, name, description
`

func (q *Queries) DeleteSantriOccupation(ctx context.Context, id int32) (SantriOccupation, error) {
	row := q.db.QueryRow(ctx, deleteSantriOccupation, id)
	var i SantriOccupation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const querySantriOccupations = `-- name: QuerySantriOccupations :many
SELECT 
    id, name, description,
    COUNT(*) OVER () AS "count"
FROM
    "santri_occupation"
`

type QuerySantriOccupationsRow struct {
	ID          int32
	Name        string
	Description pgtype.Text
	Count       int64
}

func (q *Queries) QuerySantriOccupations(ctx context.Context) ([]QuerySantriOccupationsRow, error) {
	rows, err := q.db.Query(ctx, querySantriOccupations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuerySantriOccupationsRow{}
	for rows.Next() {
		var i QuerySantriOccupationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSantriOccupation = `-- name: UpdateSantriOccupation :one
UPDATE "santri_occupation" SET "name" = $1, "description" = $2 WHERE "id" = $3 RETURNING id, name, description
`

type UpdateSantriOccupationParams struct {
	Name        string
	Description pgtype.Text
	ID          int32
}

func (q *Queries) UpdateSantriOccupation(ctx context.Context, arg UpdateSantriOccupationParams) (SantriOccupation, error) {
	row := q.db.QueryRow(ctx, updateSantriOccupation, arg.Name, arg.Description, arg.ID)
	var i SantriOccupation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
