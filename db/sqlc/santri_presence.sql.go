// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: santri_presence.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSantriPresence = `-- name: CreateSantriPresence :one
INSERT INTO
    "santri_presence" (
        "schedule_id",
        "schedule_name",
        "type",
        "santri_id",
        "notes",
        "santri_permission_id"
    )
VALUES
    (
        $1,
        $2,
        $3 :: presence_type,
        $4,
        $5,
        $6
    ) RETURNING id, schedule_id, schedule_name, type, santri_id, created_at, notes, santri_permission_id
`

type CreateSantriPresenceParams struct {
	ScheduleID         int32
	ScheduleName       string
	Type               PresenceType
	SantriID           int32
	Notes              pgtype.Text
	SantriPermissionID pgtype.Int4
}

func (q *Queries) CreateSantriPresence(ctx context.Context, arg CreateSantriPresenceParams) (SantriPresence, error) {
	row := q.db.QueryRow(ctx, createSantriPresence,
		arg.ScheduleID,
		arg.ScheduleName,
		arg.Type,
		arg.SantriID,
		arg.Notes,
		arg.SantriPermissionID,
	)
	var i SantriPresence
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.ScheduleName,
		&i.Type,
		&i.SantriID,
		&i.CreatedAt,
		&i.Notes,
		&i.SantriPermissionID,
	)
	return i, err
}

const listSantriPresences = `-- name: ListSantriPresences :many
SELECT
    santri_presence.id, schedule_id, schedule_name, type, santri_id, created_at, notes, santri_permission_id, santri.id, nis, name, gender, is_active, generation, photo, occupation_id, parent_id
FROM
    "santri_presence"
    INNER JOIN "santri" ON "santri_presence"."santri_id" = "santri"."id"
WHERE
    (
        $1 :: integer IS NULL
        OR "santri_id" = $1 :: integer
    )
    AND (
        $2 :: text IS NULL
        OR "santri"."name" ILIKE '%' || $2 || '%'
    )
    AND (
        $3 :: presence_type IS NULL
        OR "type" = $3 :: presence_type
    )
    AND (
        $4 :: integer IS NULL
        OR "schedule_id" = $4 :: integer
    )
    AND (
        $5 :: timestamp IS NULL
        OR "created_at" >= $5 :: timestamp
    )
    AND (
        $6 :: timestamp IS NULL
        OR "created_at" <= $6 :: timestamp
    )
LIMIT
    $8 OFFSET $7
`

type ListSantriPresencesParams struct {
	SantriID     pgtype.Int4
	Q            pgtype.Text
	Type         NullPresenceType
	ScheduleID   pgtype.Int4
	FromDate     pgtype.Timestamp
	ToDate       pgtype.Timestamp
	OffsetNumber int32
	LimitNumber  int32
}

type ListSantriPresencesRow struct {
	ID                 pgtype.Int4
	ScheduleID         int32
	ScheduleName       string
	Type               PresenceType
	SantriID           int32
	CreatedAt          pgtype.Timestamp
	Notes              pgtype.Text
	SantriPermissionID pgtype.Int4
	ID_2               int32
	Nis                pgtype.Text
	Name               string
	Gender             Gender
	IsActive           bool
	Generation         int32
	Photo              pgtype.Text
	OccupationID       pgtype.Int4
	ParentID           pgtype.Int4
}

func (q *Queries) ListSantriPresences(ctx context.Context, arg ListSantriPresencesParams) ([]ListSantriPresencesRow, error) {
	rows, err := q.db.Query(ctx, listSantriPresences,
		arg.SantriID,
		arg.Q,
		arg.Type,
		arg.ScheduleID,
		arg.FromDate,
		arg.ToDate,
		arg.OffsetNumber,
		arg.LimitNumber,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSantriPresencesRow{}
	for rows.Next() {
		var i ListSantriPresencesRow
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.ScheduleName,
			&i.Type,
			&i.SantriID,
			&i.CreatedAt,
			&i.Notes,
			&i.SantriPermissionID,
			&i.ID_2,
			&i.Nis,
			&i.Name,
			&i.Gender,
			&i.IsActive,
			&i.Generation,
			&i.Photo,
			&i.OccupationID,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
