// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ArduinoModeType string

const (
	ArduinoModeTypeEntry    ArduinoModeType = "entry"
	ArduinoModeTypePresence ArduinoModeType = "presence"
	ArduinoModeTypeExcuse   ArduinoModeType = "excuse"
)

func (e *ArduinoModeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArduinoModeType(s)
	case string:
		*e = ArduinoModeType(s)
	default:
		return fmt.Errorf("unsupported scan type for ArduinoModeType: %T", src)
	}
	return nil
}

type NullArduinoModeType struct {
	ArduinoModeType ArduinoModeType
	Valid           bool // Valid is true if ArduinoModeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArduinoModeType) Scan(value interface{}) error {
	if value == nil {
		ns.ArduinoModeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArduinoModeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArduinoModeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArduinoModeType), nil
}

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type PresenceType string

const (
	PresenceTypeAlpha      PresenceType = "alpha"
	PresenceTypePermission PresenceType = "permission"
	PresenceTypeSick       PresenceType = "sick"
	PresenceTypeLate       PresenceType = "late"
	PresenceTypePresent    PresenceType = "present"
)

func (e *PresenceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PresenceType(s)
	case string:
		*e = PresenceType(s)
	default:
		return fmt.Errorf("unsupported scan type for PresenceType: %T", src)
	}
	return nil
}

type NullPresenceType struct {
	PresenceType PresenceType
	Valid        bool // Valid is true if PresenceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPresenceType) Scan(value interface{}) error {
	if value == nil {
		ns.PresenceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PresenceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPresenceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PresenceType), nil
}

type SantriPermissionType string

const (
	SantriPermissionTypeSick       SantriPermissionType = "sick"
	SantriPermissionTypePermission SantriPermissionType = "permission"
)

func (e *SantriPermissionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SantriPermissionType(s)
	case string:
		*e = SantriPermissionType(s)
	default:
		return fmt.Errorf("unsupported scan type for SantriPermissionType: %T", src)
	}
	return nil
}

type NullSantriPermissionType struct {
	SantriPermissionType SantriPermissionType
	Valid                bool // Valid is true if SantriPermissionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSantriPermissionType) Scan(value interface{}) error {
	if value == nil {
		ns.SantriPermissionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SantriPermissionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSantriPermissionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SantriPermissionType), nil
}

type SantriPresenceCreatedBy string

const (
	SantriPresenceCreatedBySystem SantriPresenceCreatedBy = "system"
	SantriPresenceCreatedByTap    SantriPresenceCreatedBy = "tap"
	SantriPresenceCreatedByAdmin  SantriPresenceCreatedBy = "admin"
)

func (e *SantriPresenceCreatedBy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SantriPresenceCreatedBy(s)
	case string:
		*e = SantriPresenceCreatedBy(s)
	default:
		return fmt.Errorf("unsupported scan type for SantriPresenceCreatedBy: %T", src)
	}
	return nil
}

type NullSantriPresenceCreatedBy struct {
	SantriPresenceCreatedBy SantriPresenceCreatedBy
	Valid                   bool // Valid is true if SantriPresenceCreatedBy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSantriPresenceCreatedBy) Scan(value interface{}) error {
	if value == nil {
		ns.SantriPresenceCreatedBy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SantriPresenceCreatedBy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSantriPresenceCreatedBy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SantriPresenceCreatedBy), nil
}

type UserRole string

const (
	UserRoleSuperadmin UserRole = "superadmin"
	UserRoleAdmin      UserRole = "admin"
	UserRoleEmployee   UserRole = "employee"
	UserRoleParent     UserRole = "parent"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Arduino struct {
	ID int32
	// ex: arduino1
	Name string
}

type ArduinoMode struct {
	ID             int32
	Mode           ArduinoModeType
	TopicPublish   string
	TopicSubscribe string
	ArduinoID      int32
}

type Employee struct {
	ID           int32
	Nip          pgtype.Text
	Name         string
	Gender       Gender
	Photo        pgtype.Text
	OccupationID int32
	UserID       pgtype.Int4
}

type EmployeeOccupation struct {
	ID          int32
	Name        string
	Description pgtype.Text
}

type EmployeePermission struct {
	ID              int32
	EmployeeID      int32
	ScheduleID      int32
	ScheduleName    string
	StartPermission pgtype.Time
	// waktu kembali, null berarti pulang
	EndPermission pgtype.Time
	Reason        string
	// Pulang, keluar sementara
	IsGoHome pgtype.Bool
}

type EmployeePresence struct {
	ID         pgtype.Int4
	ScheduleID pgtype.Int4
	Type       PresenceType
	EmployeeID int32
	Notes      pgtype.Text
}

type EmployeeSchedule struct {
	ID int32
	// ex: Pagi, siang, sore, malam
	Name          string
	StartPresence pgtype.Time
	// Waktu jenis
	StartTime  pgtype.Time
	FinishTime pgtype.Time
}

type Holiday struct {
	ID int32
	// Optional description of the holiday
	Name        string
	Color       pgtype.Text
	Description pgtype.Text
}

type HolidayDay struct {
	ID        int32
	Date      pgtype.Date
	HolidayID int32
}

type Parent struct {
	ID      int32
	Name    string
	Address string
	Gender  Gender
	WaPhone pgtype.Text
	Photo   pgtype.Text
	UserID  pgtype.Int4
}

type Rfid struct {
	ID        int32
	Uid       string
	CreatedAt pgtype.Timestamptz
	IsActive  bool
	// Rfid bisa milik santri
	SantriID pgtype.Int4
	// Rfid bisa milik employee
	EmployeeID pgtype.Int4
}

type Santri struct {
	ID     int32
	Nis    pgtype.Text
	Name   string
	Gender Gender
	// ex: 2024, 2022
	Generation   int32
	IsActive     pgtype.Bool
	Photo        pgtype.Text
	OccupationID pgtype.Int4
	ParentID     pgtype.Int4
}

type SantriOccupation struct {
	ID          int32
	Name        string
	Description pgtype.Text
}

type SantriPermission struct {
	ID              int32
	SantriID        int32
	Type            SantriPermissionType
	StartPermission pgtype.Timestamptz
	// Waktu berakhir, jika pulang, maka setting end permissionnya di akhir waktu berakhirnya schedule yang terakhir
	EndPermission pgtype.Timestamptz
	Excuse        string
}

type SantriPresence struct {
	ID pgtype.Int4
	// Karena bisa saja activitynya dihapus
	ScheduleID int32
	// menggunakan name, karena jika activity dihapus, atau diubah maka masih tetap ada presence nya, karena bersifat history
	ScheduleName string
	Type         PresenceType
	SantriID     int32
	CreatedAt    pgtype.Timestamptz
	CreatedBy    SantriPresenceCreatedBy
	Notes        pgtype.Text
	// Jika izin ditengah kegiatan maka akan diisi
	SantriPermissionID pgtype.Int4
}

type SantriSchedule struct {
	ID            int32
	Name          string
	Description   pgtype.Text
	StartPresence pgtype.Time
	// Waktu mulai kegiatan
	StartTime pgtype.Time
	// Waktu berakhirnya kegiatan
	FinishTime pgtype.Time
}

type User struct {
	ID       int32
	Role     NullUserRole
	Username pgtype.Text
	Password pgtype.Text
}
